{"ast":null,"code":"var _jsxFileName = \"/Users/idris/Documents/Dev/plex-cinema/client/src/components/Search/SearchResults.js\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getMovie, getSearchedMovie } from \"../../actions/movie\";\nimport moment from \"moment\";\nimport { Scrollbars } from \"react-custom-scrollbars-2\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst SearchResults = ({\n  results,\n  getSearchedMovie\n}) => {\n  // results = results.slice(0, 10);\n  let searchResults = /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Scrollbars, {\n    style: {\n      width: 700,\n      height: 350\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, results && results.length !== 0 ? results.map((result, key) => /*#__PURE__*/React.createElement(ListGroup, {\n    key: key,\n    style: {\n      width: \"30rem\",\n      color: \"black\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ListGroup.Item, {\n    action: true,\n    href: `/movie_info/${result.id}`,\n    variant: \"light\",\n    onClick: () => getSearchedMovie(result.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    style: {\n      width: \"5rem\"\n    },\n    src: `https://image.tmdb.org/t/p/w154${[result.poster_path]}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 23\n    }\n  }, result.title, ` (${result.release_date ? moment(result.release_date).format(\"YYYY\") : \"N/A\"})`))))))) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \"No results found...\"))));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 10\n    }\n  }, searchResults); // return <div>{searchResults}</div>;\n};\n\nconst mapStateToProps = state => ({\n  isLoading: state.movie.isLoading\n});\n\nexport default connect(mapStateToProps, {\n  getMovie,\n  getSearchedMovie\n})(SearchResults);","map":{"version":3,"sources":["/Users/idris/Documents/Dev/plex-cinema/client/src/components/Search/SearchResults.js"],"names":["React","useEffect","useState","useRef","Link","connect","getMovie","getSearchedMovie","moment","Scrollbars","Container","ListGroup","Row","Col","SearchResults","results","searchResults","width","height","length","map","result","key","color","id","poster_path","title","release_date","format","mapStateToProps","state","isLoading","movie"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { getMovie, getSearchedMovie } from \"../../actions/movie\";\nimport moment from \"moment\";\nimport { Scrollbars } from \"react-custom-scrollbars-2\";\nimport Container from \"react-bootstrap/esm/Container\";\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nconst SearchResults = ({ results, getSearchedMovie }) => {\n  // results = results.slice(0, 10);\n\n  let searchResults = (\n    <Container>\n      <Scrollbars style={{ width: 700, height: 350 }}>\n        {results && results.length !== 0 ? (\n          results.map((result, key) => (\n            <ListGroup key={key} style={{ width: \"30rem\", color: \"black\" }}>\n              <Row>\n                <Col>\n                  <ListGroup.Item\n                    action\n                    href={`/movie_info/${result.id}`}\n                    variant=\"light\"\n                    onClick={() => getSearchedMovie(result.id)}\n                  >\n                    <div>\n                      <img\n                        style={{ width: \"5rem\" }}\n                        src={`https://image.tmdb.org/t/p/w154${[\n                          result.poster_path,\n                        ]}`}\n                      />\n                      <Col>\n                        {result.title}\n                        {` (${\n                          result.release_date\n                            ? moment(result.release_date).format(\"YYYY\")\n                            : \"N/A\"\n                        })`}\n                      </Col>\n                    </div>\n                  </ListGroup.Item>\n                </Col>\n              </Row>\n            </ListGroup>\n          ))\n        ) : (\n          <div>\n            <div>No results found...</div>\n          </div>\n        )}\n      </Scrollbars>\n    </Container>\n  );\n\n  return <div>{searchResults}</div>;\n  // return <div>{searchResults}</div>;\n};\n\nconst mapStateToProps = (state) => ({\n  isLoading: state.movie.isLoading,\n});\n\nexport default connect(mapStateToProps, { getMovie, getSearchedMovie })(\n  SearchResults\n);\n"]},"metadata":{},"sourceType":"module"}