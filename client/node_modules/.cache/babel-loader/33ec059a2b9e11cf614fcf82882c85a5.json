{"ast":null,"code":"var _jsxFileName = \"/Users/idris/Documents/Dev/plex-cinema/client/src/components/Search/Search.js\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport SearchResults from \"./SearchResults\";\nimport SearchBar from \"./SearchBar\";\nimport { setSearchedMovies } from \"../../actions/movie\";\nimport { API_KEY } from \"../../config/config.js\";\nconst styles = {\n  margin: '20px'\n};\n\nconst Search = ({\n  setSearchedMovies\n}) => {\n  const [results, setResults] = useState([]);\n  const [movieResults, showMovieResults] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const hideResults = term => {\n    if (term.length === 0) {\n      showMovieResults(false);\n    }\n  };\n\n  const searchMovies = async query => {\n    try {\n      if (!query || query.length <= 0) return;\n      const url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}`;\n      let res = await fetch(url);\n      let data = await res.json();\n      setResults(data.results, showMovieResults(true));\n      setSearchedMovies(data.results);\n    } catch (err) {\n      return err;\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: styles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SearchBar, {\n    hideResults: hideResults,\n    onSearch: searchMovies,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }), movieResults ? /*#__PURE__*/React.createElement(SearchResults, {\n    results: results,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 23\n    }\n  }) : null);\n};\n\nexport default connect(null, {\n  setSearchedMovies\n})(Search);","map":{"version":3,"sources":["/Users/idris/Documents/Dev/plex-cinema/client/src/components/Search/Search.js"],"names":["React","useState","useEffect","axios","connect","SearchResults","SearchBar","setSearchedMovies","API_KEY","styles","margin","Search","results","setResults","movieResults","showMovieResults","isLoading","setIsLoading","hideResults","term","length","searchMovies","query","url","res","fetch","data","json","err"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,SAASC,OAAT,QAAwB,wBAAxB;AAGA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE;AADK,CAAf;;AAKA,MAAMC,MAAM,GAAG,CAAC;AAAEJ,EAAAA;AAAF,CAAD,KAA2B;AACxC,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACa,YAAD,EAAeC,gBAAf,IAAmCd,QAAQ,CAAC,KAAD,CAAjD;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMiB,WAAW,GAAIC,IAAD,IAAU;AAC5B,QAAIA,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACrBL,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD;AACF,GAJD;;AAMA,QAAMM,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpC,QAAI;AACF,UAAI,CAACA,KAAD,IAAUA,KAAK,CAACF,MAAN,IAAgB,CAA9B,EAAiC;AAEjC,YAAMG,GAAG,GAAI,qDAAoDf,OAAQ,UAASc,KAAM,EAAxF;AAEA,UAAIE,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAD,CAArB;AAEA,UAAIG,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAjB;AAEAd,MAAAA,UAAU,CAACa,IAAI,CAACd,OAAN,EAAeG,gBAAgB,CAAC,IAAD,CAA/B,CAAV;AACAR,MAAAA,iBAAiB,CAACmB,IAAI,CAACd,OAAN,CAAjB;AACD,KAXD,CAWE,OAAOgB,GAAP,EAAY;AACZ,aAAOA,GAAP;AACD;AACF,GAfD;;AAiBA,sBACE;AAAK,IAAA,KAAK,EAAEnB,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAW,IAAA,WAAW,EAAES,WAAxB;AAAqC,IAAA,QAAQ,EAAEG,YAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEGP,YAAY,gBAAG,oBAAC,aAAD;AAAe,IAAA,OAAO,EAAEF,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAyC,IAFxD,CADF;AAMD,CAlCD;;AAoCA,eAAeR,OAAO,CAAC,IAAD,EAAO;AAAEG,EAAAA;AAAF,CAAP,CAAP,CAAqCI,MAArC,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport SearchResults from \"./SearchResults\";\nimport SearchBar from \"./SearchBar\";\nimport { setSearchedMovies } from \"../../actions/movie\";\n\nimport { API_KEY } from \"../../config/config.js\";\n\n\nconst styles = {\n  margin: '20px'\n}\n\n\nconst Search = ({ setSearchedMovies }) => {\n  const [results, setResults] = useState([]);\n  const [movieResults, showMovieResults] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const hideResults = (term) => {\n    if (term.length === 0) {\n      showMovieResults(false);\n    }\n  };\n\n  const searchMovies = async (query) => {\n    try {\n      if (!query || query.length <= 0) return;\n\n      const url = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${query}`;\n\n      let res = await fetch(url);\n\n      let data = await res.json();\n\n      setResults(data.results, showMovieResults(true));\n      setSearchedMovies(data.results);\n    } catch (err) {\n      return err;\n    }\n  };\n\n  return (\n    <div style={styles}>\n      <SearchBar hideResults={hideResults} onSearch={searchMovies} />\n      {movieResults ? <SearchResults results={results} /> : null}\n    </div>\n  );\n};\n\nexport default connect(null, { setSearchedMovies })(Search);\n"]},"metadata":{},"sourceType":"module"}