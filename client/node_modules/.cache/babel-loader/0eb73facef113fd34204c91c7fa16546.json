{"ast":null,"code":"import { GET_MOVIE, GET_MOVIE_ERR, SET_MOVIE_ERR, FETCH_MOVIES, SET_SEARCHED_MOVIE, GET_SEARCHED_MOVIE, LOAD_MOVIE_DETAILS, SET_TVSHOWS_ERR, SET_TVSHOWS, GET_SHOW, GET_SHOW_ERR, SET_RELATED_MOVIES, NEXT_PAGE, PREV_PAGE, GET_RELATED_MOVIE_ID, LOAD_MORE, LOAD_MOVIES, LOAD_CHANGE, SET_CAST, SET_VID_KEY, FETCH_TOP_RATED, FETCH_UPCOMING_MOVIES } from \"../actions/types\";\nimport axios from \"axios\";\nimport store from \"../store\";\nimport { API_URL, API_KEY } from \"../config/config.js\"; // let movieStore = store.store.getState().movie;\n// let apiKey = config.API_KEY;\n\nexport const setSearchedMovies = movie => async dispatch => {\n  try {\n    dispatch({\n      type: SET_SEARCHED_MOVIE,\n      payload: movie\n    });\n  } catch (e) {\n    return;\n  }\n};\nexport const getRelatedMovie = id => async dispatch => {\n  dispatch({\n    type: GET_RELATED_MOVIE_ID,\n    payload: id\n  });\n};\nexport const loadMovies = endpoint => async dispatch => {\n  dispatch({\n    type: LOAD_MOVIES\n  });\n};\nexport const getSearchedMovie = id => async dispatch => {\n  dispatch({\n    type: GET_SEARCHED_MOVIE,\n    payload: id\n  });\n};\nexport const getMovie = id => async dispatch => {\n  try {\n    dispatch({\n      type: GET_MOVIE,\n      payload: id\n    });\n  } catch (e) {\n    dispatch({\n      type: GET_MOVIE_ERR\n    });\n  }\n};\nexport const loadChange = loadStatus => async dispatch => {\n  dispatch({\n    type: LOAD_CHANGE,\n    payload: loadStatus\n  });\n};\nexport const fetchCast = id => async dispatch => {\n  try {\n    let res = await axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n    dispatch(fetchVideo(id));\n    dispatch({\n      type: SET_CAST,\n      payload: res.data.cast.slice(0, 6)\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const fetchVideo = id => async dispatch => {\n  let res = await axios.get(`https://api.themoviedb.org/3/movie/${id}/videos?api_key=${API_KEY}&language=en-US`);\n\n  try {\n    dispatch({\n      type: SET_VID_KEY,\n      payload: res.data.results[0].key\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const loadMoreItems = (endpoint, page, listType) => async dispatch => {\n  endpoint = `${API_URL}movie/${listType}?api_key=${API_KEY}&language=en-US&page=${page + 1}`;\n  dispatch(fetchItems(endpoint));\n}; // export const loadMoreTvShows = (endpoint, page) => async (dispatch) => {\n//   endpoint = `https://api.themoviedb.org/3/tv/popular?api_key=${API_KEY}&language=en-US&page=${\n//     page + 1\n//   }`;\n//   dispatch(setTvShows(endpoint));\n// };\n\nexport const fetchItems = endpoint => async dispatch => {\n  fetch(endpoint).then(res => res.json()).then(data => dispatch({\n    type: FETCH_MOVIES,\n    payload: data.data\n  })); // console.log(res.data.results)\n  // try {\n  //   dispatch({\n  //     type: FETCH_MOVIES,\n  //     payload: res.data.results,\n  //   })\n  // } catch (error) {\n  //   dispatch({\n  //     type: SET_MOVIE_ERR,\n  //     payload: error,\n  //   })\n  // }\n};\nexport const fetchTopRatedMovies = endpoint => async dispatch => {\n  let res = await axios.get(endpoint);\n\n  try {\n    dispatch({\n      type: FETCH_TOP_RATED,\n      payload: res.data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const fetchUpcomingMovies = endpoint => async dispatch => {\n  let res = await axios.get(endpoint);\n\n  try {\n    dispatch({\n      type: FETCH_UPCOMING_MOVIES,\n      payload: res.data\n    });\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const loadMoreTopRatedMovies = (endpoint, page) => async dispatch => {\n  endpoint = `${API_URL}movie/top_rated?api_key=${API_KEY}&language=en-US&page=${page + 1}`;\n  dispatch(fetchTopRatedMovies(endpoint));\n};\nexport const loadMoreUpComingMovies = (endpoint, page) => async dispatch => {\n  endpoint = `${API_URL}movie/upcoming?api_key=${API_KEY}&language=en-US&page=${page + 1}`;\n  dispatch(fetchUpcomingMovies(endpoint));\n};\nexport const loadMoreTvShows = (endpoint, page) => async dispatch => {\n  endpoint = `https://api.themoviedb.org/3/tv/popular?api_key=${API_KEY}&language=en-US&page=${page + 1}`;\n  dispatch(setTvShows(endpoint));\n};\nexport const setTvShows = endpoint => async dispatch => {\n  let res = await axios.get(endpoint); // let data = await res.json();\n\n  try {\n    dispatch({\n      type: SET_TVSHOWS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: SET_TVSHOWS_ERR,\n      payload: err\n    });\n  }\n};\nexport const getShow = id => async dispatch => {\n  dispatch({\n    type: GET_SHOW,\n    payload: id\n  });\n\n  try {} catch (e) {\n    dispatch({\n      type: GET_SHOW_ERR\n    });\n  }\n};\nexport const loadMovieDetails = () => async dispatch => {\n  dispatch({\n    type: LOAD_MOVIE_DETAILS\n  });\n};\nexport const setRelatedMovies = () => async dispatch => {\n  //TODO: swtich to axios.get()\n  try {\n    const resId = await axios.get(\"/api/movie/genre_id\");\n    await fetch(`https://api.themoviedb.org/3/movie/${resId.data}/similar?api_key=${API_KEY}&language=en-US&page=1`).then(res => res.json()).then(data => {\n      let shuffled = data.results.sort(() => 0.5 - Math.random());\n      let selected = shuffled.slice(0, 5);\n      dispatch({\n        type: SET_RELATED_MOVIES,\n        payload: selected\n      });\n    });\n  } catch (error) {\n    console.error(error.response);\n  }\n};\nexport const nextPage = page => async dispatch => {\n  dispatch({\n    type: NEXT_PAGE,\n    payload: page\n  });\n};\nexport const prevPage = page => async dispatch => {\n  page = page === 1 ? page = 2 : page;\n  dispatch({\n    type: PREV_PAGE,\n    payload: page\n  });\n};","map":{"version":3,"sources":["/Users/idris/Documents/Dev/plex-cinema/client/src/actions/movie.js"],"names":["GET_MOVIE","GET_MOVIE_ERR","SET_MOVIE_ERR","FETCH_MOVIES","SET_SEARCHED_MOVIE","GET_SEARCHED_MOVIE","LOAD_MOVIE_DETAILS","SET_TVSHOWS_ERR","SET_TVSHOWS","GET_SHOW","GET_SHOW_ERR","SET_RELATED_MOVIES","NEXT_PAGE","PREV_PAGE","GET_RELATED_MOVIE_ID","LOAD_MORE","LOAD_MOVIES","LOAD_CHANGE","SET_CAST","SET_VID_KEY","FETCH_TOP_RATED","FETCH_UPCOMING_MOVIES","axios","store","API_URL","API_KEY","setSearchedMovies","movie","dispatch","type","payload","e","getRelatedMovie","id","loadMovies","endpoint","getSearchedMovie","getMovie","loadChange","loadStatus","fetchCast","res","get","fetchVideo","data","cast","slice","error","console","results","key","loadMoreItems","page","listType","fetchItems","fetch","then","json","fetchTopRatedMovies","log","fetchUpcomingMovies","err","loadMoreTopRatedMovies","loadMoreUpComingMovies","loadMoreTvShows","setTvShows","getShow","loadMovieDetails","setRelatedMovies","resId","shuffled","sort","Math","random","selected","response","nextPage","prevPage"],"mappings":"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","sourcesContent":["import {\n  GET_MOVIE,\n  GET_MOVIE_ERR,\n  SET_MOVIE_ERR,\n  FETCH_MOVIES,\n  SET_SEARCHED_MOVIE,\n  GET_SEARCHED_MOVIE,\n  LOAD_MOVIE_DETAILS,\n  SET_TVSHOWS_ERR,\n  SET_TVSHOWS,\n  GET_SHOW,\n  GET_SHOW_ERR,\n  SET_RELATED_MOVIES,\n  NEXT_PAGE,\n  PREV_PAGE,\n  GET_RELATED_MOVIE_ID,\n  LOAD_MORE,\n  LOAD_MOVIES,\n  LOAD_CHANGE,\n  SET_CAST,\n  SET_VID_KEY,\n  FETCH_TOP_RATED,\n  FETCH_UPCOMING_MOVIES,\n} from \"../actions/types\"\nimport axios from \"axios\"\nimport store from \"../store\"\nimport { API_URL, API_KEY } from \"../config/config.js\"\n\n// let movieStore = store.store.getState().movie;\n\n// let apiKey = config.API_KEY;\n\nexport const setSearchedMovies = (movie) => async (dispatch) => {\n  try {\n    dispatch({\n      type: SET_SEARCHED_MOVIE,\n      payload: movie,\n    })\n  } catch (e) {\n    return\n  }\n}\n\nexport const getRelatedMovie = (id) => async (dispatch) => {\n  dispatch({\n    type: GET_RELATED_MOVIE_ID,\n    payload: id,\n  })\n}\n\nexport const loadMovies = (endpoint) => async (dispatch) => {\n  dispatch({\n    type: LOAD_MOVIES,\n  })\n}\n\nexport const getSearchedMovie = (id) => async (dispatch) => {\n  dispatch({\n    type: GET_SEARCHED_MOVIE,\n    payload: id,\n  })\n}\n\nexport const getMovie = (id) => async (dispatch) => {\n  try {\n    dispatch({\n      type: GET_MOVIE,\n      payload: id,\n    })\n  } catch (e) {\n    dispatch({\n      type: GET_MOVIE_ERR,\n    })\n  }\n}\n\nexport const loadChange = (loadStatus) => async (dispatch) => {\n  dispatch({\n    type: LOAD_CHANGE,\n    payload: loadStatus,\n  })\n}\n\nexport const fetchCast = (id) => async (dispatch) => {\n  try {\n    let res = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n    )\n\n    dispatch(fetchVideo(id))\n    dispatch({\n      type: SET_CAST,\n      payload: res.data.cast.slice(0, 6),\n    })\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nexport const fetchVideo = (id) => async (dispatch) => {\n  let res = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/videos?api_key=${API_KEY}&language=en-US`\n  )\n  try {\n    dispatch({\n      type: SET_VID_KEY,\n      payload: res.data.results[0].key,\n    })\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nexport const loadMoreItems = (endpoint, page, listType) => async (dispatch) => {\n  endpoint = `${API_URL}movie/${listType}?api_key=${API_KEY}&language=en-US&page=${\n    page + 1\n  }`\n\n  dispatch(fetchItems(endpoint))\n}\n\n// export const loadMoreTvShows = (endpoint, page) => async (dispatch) => {\n//   endpoint = `https://api.themoviedb.org/3/tv/popular?api_key=${API_KEY}&language=en-US&page=${\n//     page + 1\n//   }`;\n\n//   dispatch(setTvShows(endpoint));\n// };\n\nexport const fetchItems = (endpoint) => async (dispatch) => {\n  fetch(endpoint)\n    .then((res) => res.json())\n    .then((data) => dispatch({ type: FETCH_MOVIES, payload: data.data }))\n  // console.log(res.data.results)\n  // try {\n  //   dispatch({\n  //     type: FETCH_MOVIES,\n  //     payload: res.data.results,\n  //   })\n  // } catch (error) {\n  //   dispatch({\n  //     type: SET_MOVIE_ERR,\n  //     payload: error,\n  //   })\n  // }\n}\n\nexport const fetchTopRatedMovies = (endpoint) => async (dispatch) => {\n  let res = await axios.get(endpoint)\n\n  try {\n    dispatch({\n      type: FETCH_TOP_RATED,\n      payload: res.data,\n    })\n  } catch (error) {\n    console.log(error)\n  }\n}\n\nexport const fetchUpcomingMovies = (endpoint) => async (dispatch) => {\n  let res = await axios.get(endpoint)\n\n  try {\n    dispatch({ type: FETCH_UPCOMING_MOVIES, payload: res.data })\n  } catch (err) {\n    console.error(err)\n  }\n}\n\nexport const loadMoreTopRatedMovies = (endpoint, page) => async (dispatch) => {\n  endpoint = `${API_URL}movie/top_rated?api_key=${API_KEY}&language=en-US&page=${\n    page + 1\n  }`\n\n  dispatch(fetchTopRatedMovies(endpoint))\n}\n\nexport const loadMoreUpComingMovies = (endpoint, page) => async (dispatch) => {\n  endpoint = `${API_URL}movie/upcoming?api_key=${API_KEY}&language=en-US&page=${\n    page + 1\n  }`\n\n  dispatch(fetchUpcomingMovies(endpoint))\n}\n\nexport const loadMoreTvShows = (endpoint, page) => async (dispatch) => {\n  endpoint = `https://api.themoviedb.org/3/tv/popular?api_key=${API_KEY}&language=en-US&page=${\n    page + 1\n  }`\n\n  dispatch(setTvShows(endpoint))\n}\n\nexport const setTvShows = (endpoint) => async (dispatch) => {\n  let res = await axios.get(endpoint)\n  // let data = await res.json();\n\n  try {\n    dispatch({\n      type: SET_TVSHOWS,\n      payload: res.data,\n    })\n  } catch (err) {\n    dispatch({\n      type: SET_TVSHOWS_ERR,\n      payload: err,\n    })\n  }\n}\n\nexport const getShow = (id) => async (dispatch) => {\n  dispatch({\n    type: GET_SHOW,\n    payload: id,\n  })\n  try {\n  } catch (e) {\n    dispatch({\n      type: GET_SHOW_ERR,\n    })\n  }\n}\n\nexport const loadMovieDetails = () => async (dispatch) => {\n  dispatch({\n    type: LOAD_MOVIE_DETAILS,\n  })\n}\n\nexport const setRelatedMovies = () => async (dispatch) => {\n  //TODO: swtich to axios.get()\n  try {\n    const resId = await axios.get(\"/api/movie/genre_id\")\n\n    await fetch(\n      `https://api.themoviedb.org/3/movie/${resId.data}/similar?api_key=${API_KEY}&language=en-US&page=1`\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        let shuffled = data.results.sort(() => 0.5 - Math.random())\n\n        let selected = shuffled.slice(0, 5)\n\n        dispatch({\n          type: SET_RELATED_MOVIES,\n          payload: selected,\n        })\n      })\n  } catch (error) {\n    console.error(error.response)\n  }\n}\n\nexport const nextPage = (page) => async (dispatch) => {\n  dispatch({\n    type: NEXT_PAGE,\n    payload: page,\n  })\n}\n\nexport const prevPage = (page) => async (dispatch) => {\n  page = page === 1 ? (page = 2) : page\n  dispatch({\n    type: PREV_PAGE,\n    payload: page,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}