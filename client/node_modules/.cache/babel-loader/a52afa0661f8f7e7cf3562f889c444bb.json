{"ast":null,"code":"import { GET_MOVIE, GET_MOVIE_ERR, FETCH_MOVIES, CHANGE_LOAD, SET_MOVIE_ERR, SET_SEARCHED_MOVIE, CLEAR_MOVIE, GET_SEARCHED_MOVIE, LOAD_MOVIE_DETAILS, SET_TVSHOWS_ERR, SET_TVSHOWS, GET_SHOW, SET_RELATED_MOVIES, SET_GENRE_ID, PREV_PAGE, NEXT_PAGE, GET_RELATED_MOVIE_ID, SET_VIDEO_KEY, SET_MOVIE_ID, SET_MOVIE_IDS, LOAD_MORE, LOAD_MOVIES, LOAD_CHANGE, SET_CAST, FETCH_TOP_RATED, FETCH_UPCOMING_MOVIES } from \"../actions/types\";\nconst initialState = {\n  isLoading: true,\n  moviesNowPlaying: [],\n  moviesTopRated: [],\n  moviesUpcoming: [],\n  tvShows: [],\n  movieCast: [],\n  searchedMovie: null,\n  searchedShow: null,\n  relatedMovie: null,\n  relatedMovies: [],\n  relatedId: null,\n  videoKey: \"\",\n  movieId: null,\n  moviePage: 1,\n  totalPages: 0,\n  tvShowPage: 1,\n  totalShowPages: 0,\n  movieIds: [],\n  error: null\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case LOAD_CHANGE:\n      return { ...state,\n        isLoading: true\n      };\n\n    case GET_MOVIE:\n      return { ...state,\n        searchedMovie: state.moviesNowPlaying.find(movie => movie.id === payload) || state.moviesTopRated.find(movie => movie.id === payload) || state.moviesUpcoming.find(movie => movie.id === payload)\n      };\n\n    case SET_CAST:\n      return {\n        movieCast: [...state.movieCast, payload]\n      };\n\n    case SET_MOVIE_ID:\n      return { ...state,\n        movieId: payload\n      };\n\n    case GET_SHOW:\n      return { ...state,\n        searchedShow: state.tvShows.find(show => show.id === payload),\n        isLoading: false\n      };\n\n    case GET_SEARCHED_MOVIE:\n      return { ...state,\n        searchedMovie: state.searchedMovie.find(movie => movie.id === payload)\n      };\n\n    case FETCH_TOP_RATED:\n      return { ...state,\n        moviesTopRated: state.moviesTopRated.length = 0,\n        moviesTopRated: [...payload.results],\n        totalPages: payload.total_pages,\n        moviePage: payload.page,\n        isLoading: false\n      };\n\n    case FETCH_UPCOMING_MOVIES:\n      return { ...state,\n        moviesUpcoming: state.moviesUpcoming.length = 0,\n        moviesUpcoming: [...payload.results],\n        totalPages: payload.total_pages,\n        moviePage: payload.page,\n        isLoading: false\n      };\n\n    case GET_RELATED_MOVIE_ID:\n      return { ...state,\n        searchedMovie: state.relatedMovies.find(movie => movie.id === payload)\n      };\n\n    case CLEAR_MOVIE:\n      return { ...state,\n        searchedMovie: null\n      };\n\n    case SET_RELATED_MOVIES:\n      return { ...state,\n        relatedMovies: payload\n      };\n\n    case SET_TVSHOWS_ERR:\n      return {\n        error: payload\n      };\n\n    case GET_MOVIE_ERR:\n      return;\n\n    case SET_SEARCHED_MOVIE:\n      return { ...state,\n        searchedMovie: payload\n      };\n\n    case SET_VIDEO_KEY:\n      return { ...state,\n        videoKey: payload\n      };\n\n    case SET_TVSHOWS:\n      return { ...state,\n        tvShows: [...state.tvShows, ...payload.results],\n        totalShowPages: payload.total_pages,\n        tvShowPage: payload.page,\n        isLoading: false\n      };\n\n    case SET_GENRE_ID:\n      return { ...state,\n        relatedId: payload\n      };\n\n    case FETCH_MOVIES:\n      return { ...state,\n        // moviesNowPlaying: (state.moviesNowPlaying.length = 0),\n        moviesNowPlaying: [...state.moviesNowPlaying, ...payload.results],\n        totalPages: payload.total_pages,\n        moviePage: payload.page,\n        isLoading: false\n      };\n\n    case SET_MOVIE_ERR:\n      return null;\n\n    case LOAD_MOVIE_DETAILS:\n      return { ...state,\n        searchedMovie: payload,\n        // isLoading: false,\n        currentMovie: payload\n      };\n\n    case NEXT_PAGE:\n      return { ...state,\n        moviePage: payload\n      };\n\n    case PREV_PAGE:\n      return { ...state,\n        moviePage: payload - 1\n      };\n\n    case CHANGE_LOAD:\n      return { ...state,\n        isLoading: true\n      };\n\n    case SET_MOVIE_IDS:\n      return { ...state,\n        movieIds: state.movieIds.push(payload)\n      };\n\n    case LOAD_MORE:\n      return { ...state,\n        moviesNowPlaying: state.moviesNowPlaying.concat(payload)\n      };\n\n    case LOAD_MOVIES:\n      return { ...state,\n        moviesNowPlaying: state.movies.map(movie => movie)\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/idris/Documents/Dev/plex-cinema/client/src/reducers/movie.js"],"names":["GET_MOVIE","GET_MOVIE_ERR","FETCH_MOVIES","CHANGE_LOAD","SET_MOVIE_ERR","SET_SEARCHED_MOVIE","CLEAR_MOVIE","GET_SEARCHED_MOVIE","LOAD_MOVIE_DETAILS","SET_TVSHOWS_ERR","SET_TVSHOWS","GET_SHOW","SET_RELATED_MOVIES","SET_GENRE_ID","PREV_PAGE","NEXT_PAGE","GET_RELATED_MOVIE_ID","SET_VIDEO_KEY","SET_MOVIE_ID","SET_MOVIE_IDS","LOAD_MORE","LOAD_MOVIES","LOAD_CHANGE","SET_CAST","FETCH_TOP_RATED","FETCH_UPCOMING_MOVIES","initialState","isLoading","moviesNowPlaying","moviesTopRated","moviesUpcoming","tvShows","movieCast","searchedMovie","searchedShow","relatedMovie","relatedMovies","relatedId","videoKey","movieId","moviePage","totalPages","tvShowPage","totalShowPages","movieIds","error","state","action","type","payload","find","movie","id","show","length","results","total_pages","page","currentMovie","push","concat","movies","map"],"mappings":"AAAA,SACEA,SADF,EAEEC,aAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,aALF,EAMEC,kBANF,EAOEC,WAPF,EAQEC,kBARF,EASEC,kBATF,EAUEC,eAVF,EAWEC,WAXF,EAYEC,QAZF,EAaEC,kBAbF,EAcEC,YAdF,EAeEC,SAfF,EAgBEC,SAhBF,EAiBEC,oBAjBF,EAkBEC,aAlBF,EAmBEC,YAnBF,EAoBEC,aApBF,EAqBEC,SArBF,EAsBEC,WAtBF,EAuBEC,WAvBF,EAwBEC,QAxBF,EAyBEC,eAzBF,EA0BEC,qBA1BF,QA2BO,kBA3BP;AA6BA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,IADQ;AAEnBC,EAAAA,gBAAgB,EAAE,EAFC;AAGnBC,EAAAA,cAAc,EAAE,EAHG;AAInBC,EAAAA,cAAc,EAAE,EAJG;AAKnBC,EAAAA,OAAO,EAAE,EALU;AAMnBC,EAAAA,SAAS,EAAE,EANQ;AAOnBC,EAAAA,aAAa,EAAE,IAPI;AAQnBC,EAAAA,YAAY,EAAE,IARK;AASnBC,EAAAA,YAAY,EAAE,IATK;AAUnBC,EAAAA,aAAa,EAAE,EAVI;AAWnBC,EAAAA,SAAS,EAAE,IAXQ;AAYnBC,EAAAA,QAAQ,EAAE,EAZS;AAanBC,EAAAA,OAAO,EAAE,IAbU;AAcnBC,EAAAA,SAAS,EAAE,CAdQ;AAenBC,EAAAA,UAAU,EAAE,CAfO;AAgBnBC,EAAAA,UAAU,EAAE,CAhBO;AAiBnBC,EAAAA,cAAc,EAAE,CAjBG;AAkBnBC,EAAAA,QAAQ,EAAE,EAlBS;AAmBnBC,EAAAA,KAAK,EAAE;AAnBY,CAArB;AAsBA,eAAe,UAAUC,KAAK,GAAGpB,YAAlB,EAAgCqB,MAAhC,EAAwC;AACrD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQC,IAAR;AACE,SAAK1B,WAAL;AACE,aAAO,EACL,GAAGwB,KADE;AAELnB,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF,SAAK3B,SAAL;AACE,aAAO,EACL,GAAG8C,KADE;AAELb,QAAAA,aAAa,EACXa,KAAK,CAAClB,gBAAN,CAAuBsB,IAAvB,CAA6BC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaH,OAApD,KACAH,KAAK,CAACjB,cAAN,CAAqBqB,IAArB,CAA2BC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaH,OAAlD,CADA,IAEAH,KAAK,CAAChB,cAAN,CAAqBoB,IAArB,CAA2BC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaH,OAAlD;AALG,OAAP;;AAOF,SAAK1B,QAAL;AACE,aAAO;AAAES,QAAAA,SAAS,EAAE,CAAC,GAAGc,KAAK,CAACd,SAAV,EAAqBiB,OAArB;AAAb,OAAP;;AACF,SAAK/B,YAAL;AACE,aAAO,EACL,GAAG4B,KADE;AAELP,QAAAA,OAAO,EAAEU;AAFJ,OAAP;;AAIF,SAAKtC,QAAL;AACE,aAAO,EACL,GAAGmC,KADE;AAELZ,QAAAA,YAAY,EAAEY,KAAK,CAACf,OAAN,CAAcmB,IAAd,CAAoBG,IAAD,IAAUA,IAAI,CAACD,EAAL,KAAYH,OAAzC,CAFT;AAGLtB,QAAAA,SAAS,EAAE;AAHN,OAAP;;AAKF,SAAKpB,kBAAL;AACE,aAAO,EACL,GAAGuC,KADE;AAELb,QAAAA,aAAa,EAAEa,KAAK,CAACb,aAAN,CAAoBiB,IAApB,CACZC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaH,OADX;AAFV,OAAP;;AAMF,SAAKzB,eAAL;AACE,aAAO,EACL,GAAGsB,KADE;AAELjB,QAAAA,cAAc,EAAGiB,KAAK,CAACjB,cAAN,CAAqByB,MAArB,GAA8B,CAF1C;AAGLzB,QAAAA,cAAc,EAAE,CAAC,GAAGoB,OAAO,CAACM,OAAZ,CAHX;AAILd,QAAAA,UAAU,EAAEQ,OAAO,CAACO,WAJf;AAKLhB,QAAAA,SAAS,EAAES,OAAO,CAACQ,IALd;AAML9B,QAAAA,SAAS,EAAE;AANN,OAAP;;AAQF,SAAKF,qBAAL;AACE,aAAO,EACL,GAAGqB,KADE;AAELhB,QAAAA,cAAc,EAAGgB,KAAK,CAAChB,cAAN,CAAqBwB,MAArB,GAA8B,CAF1C;AAGLxB,QAAAA,cAAc,EAAE,CAAC,GAAGmB,OAAO,CAACM,OAAZ,CAHX;AAILd,QAAAA,UAAU,EAAEQ,OAAO,CAACO,WAJf;AAKLhB,QAAAA,SAAS,EAAES,OAAO,CAACQ,IALd;AAML9B,QAAAA,SAAS,EAAE;AANN,OAAP;;AAQF,SAAKX,oBAAL;AACE,aAAO,EACL,GAAG8B,KADE;AAELb,QAAAA,aAAa,EAAEa,KAAK,CAACV,aAAN,CAAoBc,IAApB,CACZC,KAAD,IAAWA,KAAK,CAACC,EAAN,KAAaH,OADX;AAFV,OAAP;;AAMF,SAAK3C,WAAL;AACE,aAAO,EACL,GAAGwC,KADE;AAELb,QAAAA,aAAa,EAAE;AAFV,OAAP;;AAIF,SAAKrB,kBAAL;AACE,aAAO,EACL,GAAGkC,KADE;AAELV,QAAAA,aAAa,EAAEa;AAFV,OAAP;;AAIF,SAAKxC,eAAL;AACE,aAAO;AACLoC,QAAAA,KAAK,EAAEI;AADF,OAAP;;AAGF,SAAKhD,aAAL;AACE;;AACF,SAAKI,kBAAL;AACE,aAAO,EACL,GAAGyC,KADE;AAELb,QAAAA,aAAa,EAAEgB;AAFV,OAAP;;AAIF,SAAKhC,aAAL;AACE,aAAO,EACL,GAAG6B,KADE;AAELR,QAAAA,QAAQ,EAAEW;AAFL,OAAP;;AAIF,SAAKvC,WAAL;AACE,aAAO,EACL,GAAGoC,KADE;AAELf,QAAAA,OAAO,EAAE,CAAC,GAAGe,KAAK,CAACf,OAAV,EAAmB,GAAGkB,OAAO,CAACM,OAA9B,CAFJ;AAGLZ,QAAAA,cAAc,EAAEM,OAAO,CAACO,WAHnB;AAILd,QAAAA,UAAU,EAAEO,OAAO,CAACQ,IAJf;AAKL9B,QAAAA,SAAS,EAAE;AALN,OAAP;;AAOF,SAAKd,YAAL;AACE,aAAO,EACL,GAAGiC,KADE;AAELT,QAAAA,SAAS,EAAEY;AAFN,OAAP;;AAIF,SAAK/C,YAAL;AACE,aAAO,EACL,GAAG4C,KADE;AAEL;AACAlB,QAAAA,gBAAgB,EAAE,CAAC,GAAGkB,KAAK,CAAClB,gBAAV,EAA4B,GAAGqB,OAAO,CAACM,OAAvC,CAHb;AAILd,QAAAA,UAAU,EAAEQ,OAAO,CAACO,WAJf;AAKLhB,QAAAA,SAAS,EAAES,OAAO,CAACQ,IALd;AAML9B,QAAAA,SAAS,EAAE;AANN,OAAP;;AAQF,SAAKvB,aAAL;AACE,aAAO,IAAP;;AACF,SAAKI,kBAAL;AACE,aAAO,EACL,GAAGsC,KADE;AAELb,QAAAA,aAAa,EAAEgB,OAFV;AAGL;AACAS,QAAAA,YAAY,EAAET;AAJT,OAAP;;AAMF,SAAKlC,SAAL;AACE,aAAO,EACL,GAAG+B,KADE;AAELN,QAAAA,SAAS,EAAES;AAFN,OAAP;;AAIF,SAAKnC,SAAL;AACE,aAAO,EACL,GAAGgC,KADE;AAELN,QAAAA,SAAS,EAAES,OAAO,GAAG;AAFhB,OAAP;;AAIF,SAAK9C,WAAL;AACE,aAAO,EACL,GAAG2C,KADE;AAELnB,QAAAA,SAAS,EAAE;AAFN,OAAP;;AAIF,SAAKR,aAAL;AACE,aAAO,EACL,GAAG2B,KADE;AAELF,QAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAee,IAAf,CAAoBV,OAApB;AAFL,OAAP;;AAIF,SAAK7B,SAAL;AACE,aAAO,EACL,GAAG0B,KADE;AAELlB,QAAAA,gBAAgB,EAAEkB,KAAK,CAAClB,gBAAN,CAAuBgC,MAAvB,CAA8BX,OAA9B;AAFb,OAAP;;AAIF,SAAK5B,WAAL;AACE,aAAO,EACL,GAAGyB,KADE;AAELlB,QAAAA,gBAAgB,EAAEkB,KAAK,CAACe,MAAN,CAAaC,GAAb,CAAkBX,KAAD,IAAWA,KAA5B;AAFb,OAAP;;AAIF;AACE,aAAOL,KAAP;AAnJJ;AAqJD","sourcesContent":["import {\n  GET_MOVIE,\n  GET_MOVIE_ERR,\n  FETCH_MOVIES,\n  CHANGE_LOAD,\n  SET_MOVIE_ERR,\n  SET_SEARCHED_MOVIE,\n  CLEAR_MOVIE,\n  GET_SEARCHED_MOVIE,\n  LOAD_MOVIE_DETAILS,\n  SET_TVSHOWS_ERR,\n  SET_TVSHOWS,\n  GET_SHOW,\n  SET_RELATED_MOVIES,\n  SET_GENRE_ID,\n  PREV_PAGE,\n  NEXT_PAGE,\n  GET_RELATED_MOVIE_ID,\n  SET_VIDEO_KEY,\n  SET_MOVIE_ID,\n  SET_MOVIE_IDS,\n  LOAD_MORE,\n  LOAD_MOVIES,\n  LOAD_CHANGE,\n  SET_CAST,\n  FETCH_TOP_RATED,\n  FETCH_UPCOMING_MOVIES,\n} from \"../actions/types\";\n\nconst initialState = {\n  isLoading: true,\n  moviesNowPlaying: [],\n  moviesTopRated: [],\n  moviesUpcoming: [],\n  tvShows: [],\n  movieCast: [],\n  searchedMovie: null,\n  searchedShow: null,\n  relatedMovie: null,\n  relatedMovies: [],\n  relatedId: null,\n  videoKey: \"\",\n  movieId: null,\n  moviePage: 1,\n  totalPages: 0,\n  tvShowPage: 1,\n  totalShowPages: 0,\n  movieIds: [],\n  error: null,\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case LOAD_CHANGE:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case GET_MOVIE:\n      return {\n        ...state,\n        searchedMovie:\n          state.moviesNowPlaying.find((movie) => movie.id === payload) ||\n          state.moviesTopRated.find((movie) => movie.id === payload) ||\n          state.moviesUpcoming.find((movie) => movie.id === payload),\n      };\n    case SET_CAST:\n      return { movieCast: [...state.movieCast, payload] };\n    case SET_MOVIE_ID:\n      return {\n        ...state,\n        movieId: payload,\n      };\n    case GET_SHOW:\n      return {\n        ...state,\n        searchedShow: state.tvShows.find((show) => show.id === payload),\n        isLoading: false,\n      };\n    case GET_SEARCHED_MOVIE:\n      return {\n        ...state,\n        searchedMovie: state.searchedMovie.find(\n          (movie) => movie.id === payload\n        ),\n      };\n    case FETCH_TOP_RATED:\n      return {\n        ...state,\n        moviesTopRated: (state.moviesTopRated.length = 0),\n        moviesTopRated: [...payload.results],\n        totalPages: payload.total_pages,\n        moviePage: payload.page,\n        isLoading: false,\n      };\n    case FETCH_UPCOMING_MOVIES:\n      return {\n        ...state,\n        moviesUpcoming: (state.moviesUpcoming.length = 0),\n        moviesUpcoming: [...payload.results],\n        totalPages: payload.total_pages,\n        moviePage: payload.page,\n        isLoading: false,\n      };\n    case GET_RELATED_MOVIE_ID:\n      return {\n        ...state,\n        searchedMovie: state.relatedMovies.find(\n          (movie) => movie.id === payload\n        ),\n      };\n    case CLEAR_MOVIE:\n      return {\n        ...state,\n        searchedMovie: null,\n      };\n    case SET_RELATED_MOVIES:\n      return {\n        ...state,\n        relatedMovies: payload,\n      };\n    case SET_TVSHOWS_ERR:\n      return {\n        error: payload,\n      };\n    case GET_MOVIE_ERR:\n      return;\n    case SET_SEARCHED_MOVIE:\n      return {\n        ...state,\n        searchedMovie: payload,\n      };\n    case SET_VIDEO_KEY:\n      return {\n        ...state,\n        videoKey: payload,\n      };\n    case SET_TVSHOWS:\n      return {\n        ...state,\n        tvShows: [...state.tvShows, ...payload.results],\n        totalShowPages: payload.total_pages,\n        tvShowPage: payload.page,\n        isLoading: false,\n      };\n    case SET_GENRE_ID:\n      return {\n        ...state,\n        relatedId: payload,\n      };\n    case FETCH_MOVIES:\n      return {\n        ...state,\n        // moviesNowPlaying: (state.moviesNowPlaying.length = 0),\n        moviesNowPlaying: [...state.moviesNowPlaying, ...payload.results],\n        totalPages: payload.total_pages,\n        moviePage: payload.page,\n        isLoading: false,\n      };\n    case SET_MOVIE_ERR:\n      return null;\n    case LOAD_MOVIE_DETAILS:\n      return {\n        ...state,\n        searchedMovie: payload,\n        // isLoading: false,\n        currentMovie: payload,\n      };\n    case NEXT_PAGE:\n      return {\n        ...state,\n        moviePage: payload,\n      };\n    case PREV_PAGE:\n      return {\n        ...state,\n        moviePage: payload - 1,\n      };\n    case CHANGE_LOAD:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case SET_MOVIE_IDS:\n      return {\n        ...state,\n        movieIds: state.movieIds.push(payload),\n      };\n    case LOAD_MORE:\n      return {\n        ...state,\n        moviesNowPlaying: state.moviesNowPlaying.concat(payload),\n      };\n    case LOAD_MOVIES:\n      return {\n        ...state,\n        moviesNowPlaying: state.movies.map((movie) => movie),\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}