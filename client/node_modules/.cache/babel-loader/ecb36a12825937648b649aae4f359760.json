{"ast":null,"code":"import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport { USER_LOADED, AUTH_ERROR, REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_FAIL, CLEAR_PROFILE, LOGOUT, LOGIN_SUCCESS, GOOGLE_AUTH, REMOVE_ALERT, LOAD_CART } from \"./types\"; // Load user\n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"/api/user\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = _ref => {\n  let {\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      email,\n      password\n    });\n\n    try {\n      const res = await axios.post(\"/api/user\", body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n      }\n\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"/api/auth\", body, config); // token dispatch\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(errors);\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\", 3000)));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout\n\nexport const logOut = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/idris/Documents/Dev/plex-cinema/client/src/actions/auth.js"],"names":["axios","setAlert","setAuthToken","USER_LOADED","AUTH_ERROR","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_FAIL","CLEAR_PROFILE","LOGOUT","LOGIN_SUCCESS","GOOGLE_AUTH","REMOVE_ALERT","LOAD_CART","loadUser","dispatch","localStorage","token","res","get","type","payload","data","error","register","email","password","config","headers","body","JSON","stringify","post","err","errors","response","forEach","msg","login","console","log","logOut"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SACEC,WADF,EAEEC,UAFF,EAGEC,gBAHF,EAIEC,aAJF,EAKEC,UALF,EAMEC,aANF,EAOEC,MAPF,EAQEC,aARF,EASEC,WATF,EAUEC,YAVF,EAWEC,SAXF,QAYO,SAZP,C,CAcA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAChD,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACtBf,IAAAA,YAAY,CAACc,YAAY,CAACC,KAAd,CAAZ;AACD;;AACD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMlB,KAAK,CAACmB,GAAN,CAAU,WAAV,CAAlB;AAEAJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEjB,WADC;AAEPkB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,KAAP,EAAc;AACdR,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEhB;AADC,KAAD,CAAR;AAGD;AACF,CAhBM,C,CAkBP;;AACA,OAAO,MAAMoB,QAAQ,GACnB;AAAA,MAAC;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD;AAAA,SACA,MAAOX,QAAP,IAAoB;AAClB,UAAMY,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADI,KAAf;AAMA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEN,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAf,CAAb;;AAEA,QAAI;AACF,YAAMR,GAAG,GAAG,MAAMlB,KAAK,CAACgC,IAAN,CAAW,WAAX,EAAwBH,IAAxB,EAA8BF,MAA9B,CAAlB;AAEAZ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEf,gBADC;AAEPgB,QAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,OAAD,CAAR;AAKAP,MAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AACD,KATD,CASE,OAAOmB,GAAP,EAAY;AACZ,YAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAab,IAAb,CAAkBY,MAAjC;;AAEA,UAAIA,MAAJ,EAAY;AACVA,QAAAA,MAAM,CAACE,OAAP,CAAgBb,KAAD,IAAWR,QAAQ,CAACd,QAAQ,CAACsB,KAAK,CAACc,GAAP,EAAY,QAAZ,CAAT,CAAlC;AACD;;AAEDtB,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEd;AADC,OAAD,CAAR;AAGD;AACF,GA9BD;AAAA,CADK,C,CAiCP;;AACA,OAAO,MAAMgC,KAAK,GAAG,CAACb,KAAD,EAAQC,QAAR,KAAqB,MAAOX,QAAP,IAAoB;AAC5D,QAAMY,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf;AAMA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEN,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAf,CAAb;;AAEA,MAAI;AACF,UAAMR,GAAG,GAAG,MAAMlB,KAAK,CAACgC,IAAN,CAAW,WAAX,EAAwBH,IAAxB,EAA8BF,MAA9B,CAAlB,CADE,CAGF;;AACAZ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEV,aADC;AAEPW,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAKAP,IAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AACD,GAVD,CAUE,OAAOmB,GAAP,EAAY;AACZ,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAab,IAAb,CAAkBY,MAAjC;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;;AACA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAgBb,KAAD,IAAWR,QAAQ,CAACd,QAAQ,CAACsB,KAAK,CAACc,GAAP,EAAY,QAAZ,EAAsB,IAAtB,CAAT,CAAlC;AACD;;AAEDtB,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEb;AADC,KAAD,CAAR;AAGD;AACF,CA9BM,C,CAgCP;;AACA,OAAO,MAAMkC,MAAM,GAAG,MAAO1B,QAAD,IAAc;AACxCA,EAAAA,QAAQ,CAAC;AAAEK,IAAAA,IAAI,EAAEX;AAAR,GAAD,CAAR;AACD,CAFM","sourcesContent":["import axios from \"axios\";\nimport { setAlert } from \"./alert\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport {\n  USER_LOADED,\n  AUTH_ERROR,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_FAIL,\n  CLEAR_PROFILE,\n  LOGOUT,\n  LOGIN_SUCCESS,\n  GOOGLE_AUTH,\n  REMOVE_ALERT,\n  LOAD_CART,\n} from \"./types\";\n\n// Load user\nexport const loadUser = () => async (dispatch) => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n    const res = await axios.get(\"/api/user\");\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\n// Register User\nexport const register =\n  ({ email, password }) =>\n  async (dispatch) => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    };\n\n    const body = JSON.stringify({ email, password });\n\n    try {\n      const res = await axios.post(\"/api/user\", body, config);\n\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data,\n      });\n\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\")));\n      }\n\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n    }\n  };\n\n// Login User\nexport const login = (email, password) => async (dispatch) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  const body = JSON.stringify({ email, password });\n\n  try {\n    const res = await axios.post(\"/api/auth\", body, config);\n\n    // token dispatch\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data,\n    });\n\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n    console.log(errors);\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, \"danger\", 3000)));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\n// Logout\nexport const logOut = () => (dispatch) => {\n  dispatch({ type: LOGOUT });\n};\n"]},"metadata":{},"sourceType":"module"}