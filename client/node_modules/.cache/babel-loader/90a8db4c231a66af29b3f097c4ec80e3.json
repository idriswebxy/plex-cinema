{"ast":null,"code":"var _jsxFileName = \"/Users/idris/Documents/Dev/plex-cinema/client/src/components/Layout/Landing.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../../actions/auth\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport Spinner from \"../Spinner/LoadSpinner\";\nimport { API_URL, API_KEY, POSTER_SIZE, IMAGE_BASE_URL } from \"../../config/config\";\nimport { addToCart, loadCart } from \"../../actions/cart\";\nimport { fetchItems, nextPage, prevPage, loadMovies, loadChange, loadMoreItems } from \"../../actions/movie\";\nimport MovieList from \"../Movies/MovieList\";\n\nconst Landing = _ref => {\n  let {\n    login,\n    authenticated,\n    loading,\n    movies,\n    fetchItems\n  } = _ref;\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\"\n  });\n  let endpoint = \"\";\n  useEffect(() => {\n    if (movies.length <= 20) {\n      endpoint = `${API_URL}movie/now_playing?api_key=${API_KEY}&language=en-US&page=1`;\n      fetchItems(endpoint);\n      loadCart();\n    } else {\n      loadCart();\n    }\n  }, []);\n  const {\n    isLoading,\n    isAuthenticated\n  } = useAuth0();\n  const {\n    email,\n    password\n  } = formData;\n\n  const onChange = e => setFormData({ ...formData,\n    [e.target.name]: e.target.value\n  });\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    login(email, password);\n  }; // if (authenticated || isAuthenticated) {\n  //   return <Redirect to=\"/movies\" />;\n  // }\n  // if (loading) {\n  //   return <Spinner />;\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MovieList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = state => ({\n  auth: state.auth.authenticated,\n  loading: state.auth.loading,\n  movies: state.movie.movies\n});\n\nexport default connect(mapStateToProps, {\n  login,\n  fetchItems\n})(Landing);","map":{"version":3,"sources":["/Users/idris/Documents/Dev/plex-cinema/client/src/components/Layout/Landing.js"],"names":["React","useEffect","useState","Redirect","connect","login","useAuth0","Spinner","API_URL","API_KEY","POSTER_SIZE","IMAGE_BASE_URL","addToCart","loadCart","fetchItems","nextPage","prevPage","loadMovies","loadChange","loadMoreItems","MovieList","Landing","authenticated","loading","movies","formData","setFormData","email","password","endpoint","length","isLoading","isAuthenticated","onChange","e","target","name","value","onSubmit","preventDefault","mapStateToProps","state","auth","movie"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,WAA3B,EAAwCC,cAAxC,QAA8D,qBAA9D;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,oBAApC;AACA,SACEC,UADF,EAEEC,QAFF,EAGEC,QAHF,EAIEC,UAJF,EAKEC,UALF,EAMEC,aANF,QAOO,qBAPP;AAQA,OAAOC,SAAP,MAAsB,qBAAtB;;AAGA,MAAMC,OAAO,GAAG,QAA2D;AAAA,MAA1D;AAAEhB,IAAAA,KAAF;AAASiB,IAAAA,aAAT;AAAwBC,IAAAA,OAAxB;AAAiCC,IAAAA,MAAjC;AAAyCV,IAAAA;AAAzC,GAA0D;AACzE,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BxB,QAAQ,CAAC;AACvCyB,IAAAA,KAAK,EAAE,EADgC;AAEvCC,IAAAA,QAAQ,EAAE;AAF6B,GAAD,CAAxC;AAKA,MAAIC,QAAQ,GAAG,EAAf;AAEA5B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIuB,MAAM,CAACM,MAAP,IAAiB,EAArB,EAAyB;AACvBD,MAAAA,QAAQ,GAAI,GAAErB,OAAQ,6BAA4BC,OAAQ,wBAA1D;AACAK,MAAAA,UAAU,CAACe,QAAD,CAAV;AACAhB,MAAAA,QAAQ;AACT,KAJD,MAIO;AACLA,MAAAA,QAAQ;AACT;AACF,GARQ,EAQN,EARM,CAAT;AAUA,QAAM;AAAEkB,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAiC1B,QAAQ,EAA/C;AAEA,QAAM;AAAEqB,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,QAA5B;;AAEA,QAAMQ,QAAQ,GAAIC,CAAD,IACfR,WAAW,CAAC,EAAE,GAAGD,QAAL;AAAe,KAACS,CAAC,CAACC,MAAF,CAASC,IAAV,GAAiBF,CAAC,CAACC,MAAF,CAASE;AAAzC,GAAD,CADb;;AAGA,QAAMC,QAAQ,GAAG,MAAOJ,CAAP,IAAa;AAC5BA,IAAAA,CAAC,CAACK,cAAF;AACAlC,IAAAA,KAAK,CAACsB,KAAD,EAAQC,QAAR,CAAL;AACD,GAHD,CAzByE,CA8BzE;AACA;AACA;AAEA;AACA;AACA;;;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CA3CD;;AA6CA,MAAMY,eAAe,GAAIC,KAAD,KAAY;AAClCC,EAAAA,IAAI,EAAED,KAAK,CAACC,IAAN,CAAWpB,aADiB;AAElCC,EAAAA,OAAO,EAAEkB,KAAK,CAACC,IAAN,CAAWnB,OAFc;AAGlCC,EAAAA,MAAM,EAAEiB,KAAK,CAACE,KAAN,CAAYnB;AAHc,CAAZ,CAAxB;;AAMA,eAAepB,OAAO,CAACoC,eAAD,EAAkB;AAAEnC,EAAAA,KAAF;AAASS,EAAAA;AAAT,CAAlB,CAAP,CAAgDO,OAAhD,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../../actions/auth\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport Spinner from \"../Spinner/LoadSpinner\";\nimport { API_URL, API_KEY, POSTER_SIZE, IMAGE_BASE_URL } from \"../../config/config\";\nimport { addToCart, loadCart } from \"../../actions/cart\";\nimport {\n  fetchItems,\n  nextPage,\n  prevPage,\n  loadMovies,\n  loadChange,\n  loadMoreItems,\n} from \"../../actions/movie\";\nimport MovieList from \"../Movies/MovieList\";\n\n\nconst Landing = ({ login, authenticated, loading, movies, fetchItems }) => {\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  let endpoint = \"\";\n\n  useEffect(() => {\n    if (movies.length <= 20) {\n      endpoint = `${API_URL}movie/now_playing?api_key=${API_KEY}&language=en-US&page=1`;\n      fetchItems(endpoint);\n      loadCart();\n    } else {\n      loadCart();\n    }\n  }, []);\n\n  const { isLoading, isAuthenticated } = useAuth0();\n\n  const { email, password } = formData;\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    login(email, password);\n  };\n\n  // if (authenticated || isAuthenticated) {\n  //   return <Redirect to=\"/movies\" />;\n  // }\n\n  // if (loading) {\n  //   return <Spinner />;\n  // }\n\n  return (\n    <div>\n      <MovieList />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth.authenticated,\n  loading: state.auth.loading,\n  movies: state.movie.movies,\n});\n\nexport default connect(mapStateToProps, { login, fetchItems })(Landing);\n  "]},"metadata":{},"sourceType":"module"}